# used for manipulating directory paths
import os

# Numeric and vector computation for python
import numpy as np

# Plotting library
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D  # needed to plot 3-D surfaces

# tells matplotlib to embed plots within the Kaggle notebook
%matplotlib inline


#WarmUpExercise(A)
def warmUpExercise():
    A = np.eye(5)
    return A

warmUpExercise()

#Plot data(B)
data = np.loadtxt('/kaggle/input/week-1-ml-andrew-ng/ex1data1.txt', delimiter = ",")
#X = independent variable(population), y = dependent variable(profit)
X = data[:, 0]#Extracting all the population from first column
y = data[:, 1]#Extracting all the profits from second column
m = y.size #Training set

def plotData(x, y):
    plt.scatter(x, y)
    plt.plot(x, y, 'ro', ms = 10, mec = 'k')
    plt.ylabel('Profit in $10,000')
    plt.xlabel('Population of City in 10,000s')
    
plotData(X, y)
    
#Compute Cost (C)
X_ones = np.ones(m)#Adding a column of Xo = 1
X = np.stack([X_ones, X], axis = 1)#Adding the column of ones to the existing array of X's, Axis = 1 denotes adding a column

iterations = 1500
alpha = 0.01
def h(theta,X): #Linear hypothesis function
    return np.dot(X,theta)#Dot product of X and theta

def computeCost(theta,X,y): #Cost function
    J = float((1./(2 * m)) * np.dot((h(theta, X) - y).T, (h(theta, X) - y))) #Dot product of squared error
    return J
    
theta = np.array([0.0, 0.0])#Parameters are initialized to 0
J = computeCost(theta, X, y)#Cost function
print('With theta = [0, 0] \nCost computed = %.2f' % J)

#Gradient descent (d)
